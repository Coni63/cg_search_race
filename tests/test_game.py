import unittest

from game import GameManager, CheckPoint, Pod, Action
from ai.AG import Eval


class TestGame(unittest.TestCase):

    def test_start_position(self):
        game = GameManager()
        pod, checkpoints = game.set_testcase("testcases/test1.json")

        self.assertEqual(pod.x, 10353)
        self.assertEqual(pod.y, 1986)
        self.assertEqual(pod.angle, 161)  # round at loading
        self.assertEqual(pod.vx, 0)
        self.assertEqual(pod.vy, 0)
        self.assertEqual(pod.nextCheckPointId, 0)

    def test_checkpoint_list(self):
        game = GameManager()
        pod, checkpoints = game.set_testcase("testcases/test1.json")
        target = [
            CheckPoint(2757, 4659),
            CheckPoint(3358, 2838),
            CheckPoint(10353, 1986),
            CheckPoint(2757, 4659),
            CheckPoint(3358, 2838),
            CheckPoint(10353, 1986),
            CheckPoint(2757, 4659),
            CheckPoint(3358, 2838),
            CheckPoint(10353, 1986),
            CheckPoint(59986, -4059)
        ]

        self.assertListEqual(target, checkpoints)

    def test_apply_move(self):
        game = GameManager()

        # override test_case
        game.checkpoints = [
            CheckPoint(x=800, y=0),
            CheckPoint(x=2200, y=0),
            CheckPoint(x=3600, y=0),  # this checkpoint will not be reach to end the game
        ]
        game.pod = Pod(x=0, y=0, vx=0, vy=0, angle=0, nextCheckPointId=0)
        self.assertEqual(game.turn, 0)

        pod, done, t = game.apply_action(Action(thrust=1, angle=0))
        self.assertEqual(game.turn, 1)
        self.assertFalse(done)

        for i in range(598):
            pod, done, t = game.apply_action(Action(thrust=1, angle=0))
        self.assertEqual(game.turn, 599)
        self.assertFalse(done)

        pod, done, t = game.apply_action(Action(thrust=1, angle=0))
        self.assertEqual(game.turn, 600)
        self.assertTrue(done)

    def test_apply_moves(self):
        game = GameManager()

        # override test_case
        game.checkpoints = [
            CheckPoint(x=800, y=0),
            CheckPoint(x=2200, y=0),
            CheckPoint(x=3600, y=0),  # this checkpoint will not be reach to end the game
        ]
        game.pod = Pod(x=0, y=0, vx=0, vy=0, angle=0, nextCheckPointId=0)
        self.assertEqual(game.turn, 0)

        pod, done, t = game.apply_action(Action(thrust=1, angle=0))
        self.assertEqual(game.turn, 1)
        self.assertFalse(done)

        actions = [Action(thrust=1, angle=0) for i in range(598)]
        pod, done, t = game.apply_actions(actions)
        self.assertEqual(game.turn, 599)
        self.assertFalse(done)

        pod, done, t = game.apply_action(Action(thrust=1, angle=0))
        self.assertEqual(game.turn, 600)
        self.assertTrue(done)

    def test_clone(self):
        game = GameManager()
        pod, checkpoints = game.set_testcase("testcases/test1.json")

        self.assertEqual(game.pod.x, 10353)
        self.assertEqual(game.pod.y, 1986)
        self.assertAlmostEqual(round(game.pod.angle), 161)

        game.apply_action(Action(thrust=200, angle=0))
        self.assertEqual(game.pod.x, 10163)
        self.assertEqual(game.pod.y, 2051)

        game2 = game.clone()
        self.assertEqual(game.pod.x, game2.pod.x)
        self.assertEqual(game.pod.y, game2.pod.y)
        self.assertNotEqual(game, game2)

    def test_simulation_1(self):
        """
        Sur le test 1:
        - run de l'AG sur 30 steps
        - generate output values for CG
        - run this on CG and record pod values
        - simulate the same action on this game
        - compare the pod values after every action

        Ce test est realisé avant un fix sur le cross de chekcpoints resultant a d'autres output et resultats
        Le pod passe a coté du 2eme checkpoint en pensant l'avoir
        """
        game = GameManager()
        pod, checkpoints = game.set_testcase("testcases/test13.json")

        val = (game.pod.x, game.pod.y, game.pod.vx, game.pod.vy, game.pod.angle, game.pod.nextCheckPointId)
        self.assertTupleEqual((13332, 4114, 0, 0, 154, 0), val)

        command = "200,-14;200,-1;200,14;200,7;200,-12;176,0;200,18;116,18;100,18;0,18;0,18;15,18;146,18;200,18;200,18;195,18;200,9;200,6;200,15;200,15;200,11;200,11;161,-3;191,18;98,18;18,18;0,18;20,18;87,11;200,18;197,18;200,18;200,18;200,14;151,-7;166,9;200,-8;200,10;197,-1;200,7;200,-7;200,-18;200,-18;123,-18;7,-18;0,-18;0,-18;44,-18;58,-18;158,-18;176,-18;200,-18;200,-18;200,-17;200,-15;200,-2;200,0;200,9;198,-9;184,17;184,8;173,18;157,18;120,12;0,18;178,18;131,16;200,15;200,18;200,15;200,11;200,-9;200,9;200,4;194,10;200,14;171,16;200,15;16,18;53,18;0,18;200,18;200,15;200,18;194,18;200,12;200,14;176,8;143,15;188,18;192,-18;200,1;157,-18;11,-18;13,-18;0,-18;0,-18;3,-18;200,-18;200,-18;200,-16;200,-18;200,-3;200,-11;200,-18;200,6;200,10;200,2;200,-4;191,0;200,-18;200,-18;195,-18;37,-16;27,-18;0,-18;22,-18;5,-18;103,-18;200,-18;197,-9;200,-8;200,-6;200,-18;200,2;200,-5;200,6;194,11;200,18;200,8;200,18;149,9;91,18;64,14;114,13;160,18;200,18;200,18;200,11;190,-13;200,18;200,11;200,3;187,-4;200,18;198,18;92,18;90,18;12,18;174,18;199,18;200,18;200,14;200,18;200,14;200,3;200,18;199,1;200,15;200,5;193,15;92,18;0,18;10,18;0,18;43,18;200,18;200,18;200,18;200,11;200,0;198,0;200,18;200,-6;200,11;200,-11;200,-9;185,-10;198,-8;176,-12;37,-18;9,-18;0,-18;0,-18;48,-18;145,-18;200,-18;200,-18;200,-18;200,-18;200,-18;200,-18;200,18;149,-17;199,7;71,-10;179,5;169,18;157,18;139,10;185,16;187,16;176,15;0,18;200,18;200,18;200,0;200,-8"
        target_results = [[13178, 4242, -130, 109, 140, 0], [12897, 4482, -238, 204, 139, 0], [12480, 4776, -353, 250, 153, 0], [11939, 5094, -459, 270, 160, 0], [11310, 5469, -534, 319, 148, 0], [10626, 5881, -580, 350, 148, 0], [9851, 6279, -657, 338, 166, 0], [9078, 6608, -656, 280, 184, 0], [8329, 6850, -636, 206, 202, 0], [7693, 7056, -540, 175, 220, 0], [7153, 7231, -459, 148, 238, 0], [6690, 7364, -393, 113, 256, 0], [6307, 7331, -325, -27, 274, 1], [6056, 7118, -212, -180, 292, 1], [5972, 6784, -70, -283, 310, 1], [6067, 6397, 81, -328, 328, 1], [6332, 5990, 225, -345, 337, 1], [6748, 5586, 353, -342, 343, 1], [7300, 5237, 469, -296, 358, 2], [7963, 4985, 564, -213, 13, 2], [8709, 4853, 634, -111, 24, 2], [9506, 4856, 678, 3, 35, 2], [10320, 4944, 692, 75, 32, 2], [11134, 5165, 692, 188, 50, 2], [11862, 5443, 619, 237, 68, 2], [12482, 5697, 527, 216, 86, 2], [13009, 5913, 447, 183, 104, 2], [13445, 6112, 370, 169, 122, 2], [13755, 6344, 264, 197, 133, 2], [13844, 6637, 75, 249, 151, 3], [13725, 6923, -100, 243, 169, 3], [13426, 7141, -253, 185, 187, 3], [12991, 7241, -369, 85, 205, 3], [12466, 7200, -445, -34, 219, 3], [11892, 7085, -487, -96, 212, 3], [11279, 6880, -520, -174, 221, 3], [10591, 6597, -584, -240, 213, 3], [9860, 6220, -620, -319, 223, 3], [9093, 5769, -651, -383, 222, 3], [8310, 5235, -664, -453, 229, 3], [7497, 4648, -690, -498, 222, 3], [6624, 4068, -741, -492, 204, 3], [5684, 3555, -798, -435, 186, 3], [4765, 3145, -780, -348, 168, 3], [3978, 2800, -668, -292, 150, 3], [3310, 2508, -567, -248, 132, 3], [2743, 2260, -481, -210, 114, 4], [2257, 2093, -412, -141, 96, 4], [1857, 2008, -339, -71, 78, 4], [1597, 2073, -221, 55, 60, 5], [1506, 2245, -76, 146, 42, 5], [1612, 2472, 90, 193, 24, 5], [1900, 2685, 245, 181, 6, 5], [2341, 2827, 375, 121, 349, 5], [2895, 2860, 471, 28, 334, 5], [3542, 2794, 550, -56, 332, 5], [4268, 2644, 617, -127, 332, 5], [5074, 2451, 685, -163, 341, 5], [5933, 2195, 730, -217, 332, 5], [6843, 1942, 774, -214, 349, 6], [7800, 1718, 814, -190, 357, 6], [8781, 1572, 833, -123, 15, 6], [9745, 1534, 819, -31, 33, 6], [10648, 1587, 768, 45, 45, 6], [11416, 1632, 652, 38, 63, 6], [12095, 1845, 577, 181, 81, 6], [12656, 2156, 476, 264, 97, 6], [13057, 2605, 340, 382, 112, 7], [13268, 3140, 179, 454, 130, 7], [13283, 3708, 12, 483, 145, 8], [13112, 4272, -145, 479, 156, 8], [12799, 4859, -265, 499, 147, 8], [12351, 5439, -380, 493, 156, 8], [11783, 6000, -482, 477, 160, 8], [11109, 6510, -572, 434, 170, 8], [10337, 6930, -655, 357, 184, 8], [9521, 7228, -693, 253, 200, 8], [8664, 7366, -728, 117, 215, 8], [7926, 7470, -626, 88, 233, 8], [7282, 7507, -546, 32, 251, 8], [6736, 7539, -464, 27, 269, 8], [6330, 7374, -344, -139, 287, 9], [6091, 7065, -202, -262, 302, 9], [6042, 6674, -41, -331, 320, 9], [6180, 6270, 118, -343, 338, 9], [6494, 5892, 267, -321, 350, 9], [6960, 5584, 396, -260, 4, 9], [7528, 5360, 482, -189, 12, 10], [8137, 5235, 518, -105, 27, 10], [8787, 5262, 553, 23, 45, 10], [9511, 5372, 615, 93, 27, 10], [10302, 5558, 672, 158, 28, 10], [11128, 5743, 702, 157, 10, 10], [11840, 5898, 605, 132, 352, 10], [12456, 6024, 524, 107, 334, 10], [12980, 6131, 445, 90, 316, 10], [13425, 6221, 378, 76, 298, 10], [13803, 6294, 321, 62, 280, 11], [14096, 6157, 249, -115, 262, 11], [14257, 5862, 137, -250, 244, 11], [14260, 5463, 2, -338, 228, 11], [14088, 5025, -145, -372, 210, 11], [13764, 4562, -274, -393, 207, 11], [13297, 4113, -396, -380, 196, 11], [12701, 3739, -506, -317, 178, 11], [11995, 3408, -599, -281, 184, 11], [11201, 3078, -674, -279, 194, 11], [10334, 2743, -736, -284, 196, 11], [9402, 2417, -791, -276, 192, 11], [8424, 2101, -831, -268, 192, 11], [7394, 1853, -875, -210, 174, 11], [6336, 1724, -899, -109, 156, 11], [5292, 1745, -887, 18, 138, 11], [4385, 1794, -770, 41, 122, 11], [3608, 1861, -660, 57, 104, 11], [2948, 1918, -561, 48, 86, 12], [2395, 1986, -469, 58, 68, 12], [1929, 2047, -395, 52, 50, 12], [1621, 2153, -261, 90, 32, 13], [1554, 2291, -56, 117, 14, 13], [1694, 2425, 119, 114, 5, 13], [2012, 2528, 270, 88, 357, 13], [2479, 2584, 397, 48, 351, 13], [3054, 2541, 488, -36, 333, 13], [3723, 2420, 568, -102, 335, 13], [4464, 2218, 630, -171, 330, 13], [5276, 1965, 690, -214, 336, 13], [6155, 1707, 747, -218, 347, 14], [7101, 1506, 804, -170, 5, 14], [8099, 1380, 849, -106, 13, 14], [9119, 1377, 867, -2, 31, 14], [10100, 1470, 833, 79, 40, 14], [10981, 1626, 749, 132, 58, 14], [11749, 1818, 653, 163, 72, 14], [12411, 2094, 563, 235, 85, 14], [12938, 2484, 447, 332, 103, 15], [13281, 2987, 292, 427, 121, 15], [13422, 3545, 119, 474, 139, 16], [13367, 4119, -46, 487, 150, 16], [13182, 4735, -157, 524, 137, 16], [12843, 5343, -287, 517, 155, 16], [12361, 5908, -408, 480, 166, 16], [11756, 6426, -513, 440, 169, 16], [11062, 6914, -589, 415, 165, 16], [10273, 7318, -670, 343, 183, 16], [9418, 7590, -726, 231, 201, 16], [8620, 7763, -677, 147, 219, 16], [7893, 7834, -617, 60, 237, 16], [7272, 7882, -527, 41, 255, 16], [6754, 7749, -440, -112, 273, 16], [6385, 7451, -313, -253, 291, 17], [6197, 7042, -159, -347, 309, 17], [6197, 6574, 0, -397, 323, 17], [6386, 6111, 160, -392, 341, 17], [6745, 5701, 305, -348, 355, 17], [7249, 5346, 429, -301, 358, 18], [7870, 5100, 528, -208, 16, 18], [8588, 4950, 610, -127, 17, 18], [9367, 4928, 662, -17, 32, 18], [10188, 5031, 698, 87, 37, 18], [11004, 5270, 694, 203, 52, 18], [11729, 5559, 616, 246, 70, 18], [12345, 5805, 523, 209, 88, 18], [12865, 6023, 442, 185, 106, 18], [13307, 6208, 375, 157, 124, 18], [13648, 6391, 289, 155, 142, 18], [13749, 6614, 85, 189, 160, 19], [13634, 6809, -97, 166, 178, 19], [13344, 6919, -245, 94, 196, 19], [12920, 6922, -359, 2, 207, 19], [12382, 6833, -456, -75, 207, 19], [11749, 6668, -537, -140, 207, 19], [11070, 6386, -576, -239, 225, 19], [10338, 6021, -621, -310, 219, 19], [9588, 5557, -637, -393, 230, 19], [8795, 5038, -673, -441, 219, 19], [7948, 4497, -719, -459, 210, 19], [7055, 3974, -758, -443, 200, 19], [6103, 3489, -808, -411, 192, 19], [5119, 3078, -836, -349, 180, 19], [4247, 2740, -740, -286, 162, 19], [3499, 2459, -635, -238, 144, 19], [2864, 2221, -539, -202, 126, 20], [2325, 2019, -458, -171, 108, 20], [1867, 1896, -389, -104, 90, 20], [1522, 1929, -292, 28, 72, 21], [1347, 2118, -148, 161, 54, 21], [1360, 2396, 11, 236, 36, 21], [1561, 2693, 171, 253, 18, 21], [1932, 2946, 315, 215, 0, 21], [2437, 3099, 429, 130, 342, 21], [3027, 3111, 502, 10, 324, 21], [3719, 3059, 588, -44, 342, 21], [4429, 2929, 603, -110, 325, 21], [5207, 2725, 661, -172, 332, 21], [5923, 2509, 609, -183, 322, 21], [6682, 2228, 645, -238, 327, 22], [7490, 1946, 687, -239, 345, 22], [8333, 1715, 717, -196, 3, 22], [9185, 1550, 724, -140, 13, 22], [10070, 1499, 752, -42, 29, 22], [10954, 1589, 751, 76, 45, 22], [11793, 1817, 713, 194, 60, 22], [12506, 2011, 606, 164, 78, 22], [13091, 2373, 497, 308, 96, 23], [13506, 2863, 353, 417, 114, 23], [13777, 3462, 230, 509, 114, 23]]
        target_score = 207.57

        actions = Eval.from_str(command).moves
        for i, (action, end_state) in enumerate(zip(actions, target_results)):
            pod, done, t = game.apply_action(action)
            val = (game.pod.x, game.pod.y, game.pod.vx, game.pod.vy, game.pod.angle, game.pod.nextCheckPointId)
            self.assertTupleEqual(val, tuple(end_state))

            if done:
                self.assertAlmostEqual(i + t, target_score, places=1)
